name: "Seal CLI Action"

description: "Runs Seal CLI on a target directory"

author: "Seal Community"

branding:
  icon: "shield"
  color: "blue"

inputs:
  version:
    description: "CLI version to use, same as a tag - e.g. v0.1.0; empty will use latest"
    default: ""
  target:
    description: "Path to manifest file declaring the dependencies, such as 'requirements.txt', 'package-lock.json', etc. "
    default: "requirements.txt"
  mode:
    description: "Fix or scan; scan requires seal token as env"
    default: "scan"
  fix_mode:
    description: "local or all; fix according to the local config or fix everything"
    default: "local"
  verbosity:
    description: "Verbosity: v, vv, vvv"
    default: "v"
  summary:
    description: "Path to summary file, by default does not generate; only relevant for 'fix' mode"
    default: ""
  project:
    description: "Used as part of cli authentication for fix command, can be any* value"
    default: ""
  upload_scan_results:
    description: "Uploads the list of vulnerable packages to the Seal platform"
    default: "false"
  CLI_TOKEN:
    required: false # required for fix mode
    description: "Authentication token to the seal artifact server"
  token:
    required: false # required for fix mode. only one of CLI_TOKEN and token is required
    description: "Authentication token to the seal artifact server"

runs:
  using: "composite"
  steps:
    - name: "Download CLI - Other"
      if: runner.os != 'Linux'
      shell: bash
      run: |
        echo "::error::Unsupported runner os: ${{ runner.os }}"
        exit 1
    - name: "Set Fix Mode"
      id: fix_mode_flag
      shell: bash
      if: inputs.mode == 'fix'
      run: |
        echo "fix_mode_flag=--mode ${{ inputs.fix_mode }}" >> ${GITHUB_OUTPUT}
    - name: "Determine token value"
      id: determine_token
      shell: bash
      run: |
        if [[ "${{ inputs.token }}" ]]; then
          echo "token=${{ inputs.token }}" >> ${GITHUB_OUTPUT}
        elif [[ "${{ inputs.CLI_TOKEN }}" ]]; then
          echo "token=${{ inputs.CLI_TOKEN }}" >> ${GITHUB_OUTPUT}
        else
          echo "token=" >> ${GITHUB_OUTPUT}
        fi
    - name: "Download CLI - Linux"
      id: download
      shell: bash
      if: runner.os == 'Linux'
      env:
        GH_TOKEN: ${{ github.token }}
        cli-repo: "seal-community/cli"
      run: |
        ZIP_NAME="seal-linux-amd64*.zip" # wildcard to support version in asset name
        # not concurrent-safe for multiple jobs
        echo "Downloading zip ${ZIP_NAME}"
        gh --repo "${{ env.cli-repo }}" release download "${{ inputs.version }}" -p "${ZIP_NAME}" --output "${{ runner.temp }}/${ZIP_NAME}"
        unzip ${{ runner.temp }}/${ZIP_NAME} -d ${{ runner.temp }}
        echo "cli_path=${{ runner.temp }}/seal" >> ${GITHUB_OUTPUT}
        ${{ runner.temp }}/seal version
    - name: "Run CLI"
      shell: bash
      run: |
        echo "Running cli from ${{ steps.download.outputs.cli_path }}"
        SUMMARY_PARAM=""
        if [[ "${{ inputs.summary }}" != "" ]] && [[ "${{ inputs.mode }}" == "fix" ]]; then
            SUMMARY_PARAM="--summarize ${{ inputs.summary}}"
        fi
        UPLOAD_SCAN_RESULTS=""
        if [[ "${{ inputs.upload_scan_results }}" == "true" ]]; then
            UPLOAD_SCAN_RESULTS="--upload-scan-results"
        fi
        SEAL_PROJECT=${{ inputs.project }} SEAL_TOKEN=${{ steps.determine_token.outputs.token }} ${{ steps.download.outputs.cli_path }} -${{ inputs.verbosity }} ${{ inputs.mode }} ${{ steps.fix_mode_flag.outputs.fix_mode_flag }} ${{ inputs.target }} ${SUMMARY_PARAM} ${UPLOAD_SCAN_RESULTS} 
